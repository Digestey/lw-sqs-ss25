from testcontainers.mysql import MySqlContainer
import mysql.connector as mysql_connector
import pytest
from urllib.parse import urlparse

from app.database import add_user, delete_user, get_user, verify_user

@pytest.fixture(scope='module')
def mysql_conn():
    # Create and start the MySQL container
    with MySqlContainer('mysql:8.0') as mysql:
        # Get the connection URL to the MySQL container
        connection_url = mysql.get_connection_url()
        
        # Parse the connection URL
        url_parts = urlparse(connection_url)
        
        # Extract the necessary components from the URL
        db_config = {
            "host": url_parts.hostname,
            "user": url_parts.username,
            "password": url_parts.password,
            "port": url_parts.port,
            "database": url_parts.path.lstrip('/'),  # Extract the database name from the URL path
        }

        
        # Connect to MySQL using the parsed URL components
        conn = mysql_connector.connect(**db_config)
        yield conn  # Pass connection to the test
        
        conn.close()

def test_add_user(mysql_conn):
    # Call your add_user function here
    add_user('testuser', 'password123', mysql_conn)
    
    # Verify the user was added
    cursor = mysql_conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM users WHERE username = %s", ('testuser',))
    user = cursor.fetchone()
    assert user is not None
    assert user['username'] == 'testuser'
    cursor.close()

def test_get_user(mysql_conn):
    # Call your get_user function here
    user = get_user('testuser', mysql_conn)
    assert user is not None
    assert user['username'] == 'testuser'

def test_verify_user(mysql_conn):
    # Call your verify_user function here
    result = verify_user('testuser', 'password123', mysql_conn)
    assert result is True
