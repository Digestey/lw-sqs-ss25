@startuml
allowmixing
skinparam componentStyle rectangle
skinparam linetype ortho
title DexQuiz - Somewhat detailed class diagram. Note: This project is python-based so there are actually no classes, just python files.

package "Models" {
    class UserInDb {
        +id: int
        +username: str
        +password_hash: str
        +created_at: datetime
    }

    class QuizInfo {
        +name: str
        +pokemon_id: str
        +height: int
        +weight: int
        +stats: int[7]
        +types: (str, str)
        +entry: str
    }

    class Token {
        +access_token: str
        +token_type: str
    }

    class HighscoreResponse {
        +username: str
        +score: int
        +timestamp: datetime
    }
}

package "Routes" {
    class "frontend.py" as Frontend {
        +home(request)
        +login_form(request)
        +register_form(request)
        +highscore_page(request)
        +get_quiz(request)
    }

    
class HighscoreAPI {
    +get_all_highscores(user)
    +get_top_highscores_api(top, user)
    +post_highscore(request, user)
}
    class "quiz.py" as Quiz {
        +post_quiz(request, guess)
        +start_quiz(request)
        +next_quiz(request)
        +get_or_create_session_id(request)
        +get_or_init_state(session_id)
        +create_correct_response(score)
    }

    class "user.py" as UserAPI {
    +login(response, form_data)
    +refresh_token(response, request)
    +register(request)
    +logout(response)
    +get_username(current_user)
    -verify_credentials(username, password)
    -set_login_cookies(response, username)
}
}

package "Services" {
    class "auth_service.py" as AuthService {
        +authenticate_user(user, password)
        +create_access_token(data)
        +get_user_from_request(request)
        +register_user(username, password)
        +check_credentials(username, password)
    }

    class "database_service.py" as DatabaseService {
        +get_pool(port=3306)
        +get_connection(port=None)
        +add_user(cnn, username, hash)
        +get_user(cnn, username)
        +delete_user(cnn, username)
        +get_highscores(cnn)
        +get_top_highscores(cnn, top)
        +add_highscore(cnn, username, score)
    }

    class "pokemon_service.py" as PokemonService {
        +fetch_pokemon(logger)
        +get_random_pokemon_id()
        +get_english_dex_entry()
        +extract_stats(pokemon)
        +extract_types(pokemon)
        +log_pokemon_details(pokemon)
    }

    class "redis_service.py" as RedisService {
        +get_quiz_state(client_id)
        +set_quiz_state(client_id, quiz_info)
        +clear_quiz_state(client_id)
        +get_score(session_id)
        +increment_score(session_id)
        +reset_score(session_id)
    }
}

package "Util" {
    class "logger.py" as Logger {
        +get_logger(name)
    }
}

package "External" {
    component "Jinja2 Templates"
    component "PokeBase API"
    component "Redis"
}

Frontend --> PokemonService
Frontend --> RedisService
Frontend --> Logger
Frontend --> "Jinja2 Templates"
Frontend --> QuizInfo

UserAPI --> AuthService
UserAPI --> DatabaseService
UserAPI --> Logger

HighscoreAPI --> AuthService
HighscoreAPI --> DatabaseService
HighscoreAPI --> Logger
HighscoreAPI --> HighscoreResponse
HighscoreAPI --> RedisService

Quiz --> AuthService
Quiz --> RedisService
Quiz --> Logger

AuthService --> UserInDb
AuthService --> Token

DatabaseService --> UserInDb
DatabaseService --> Logger

PokemonService --> Logger
PokemonService --> "PokeBase API"

RedisService --> "Redis"
@enduml